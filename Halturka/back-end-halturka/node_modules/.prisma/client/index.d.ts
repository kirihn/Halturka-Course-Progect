
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model HandyMan
 * 
 */
export type HandyMan = $Result.DefaultSelection<Prisma.$HandyManPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model ServiceHandyMan
 * 
 */
export type ServiceHandyMan = $Result.DefaultSelection<Prisma.$ServiceHandyManPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EnumOrderStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  INPROCESS: 'INPROCESS',
  COMPLITED: 'COMPLITED',
  REJECTED: 'REJECTED'
};

export type EnumOrderStatus = (typeof EnumOrderStatus)[keyof typeof EnumOrderStatus]

}

export type EnumOrderStatus = $Enums.EnumOrderStatus

export const EnumOrderStatus: typeof $Enums.EnumOrderStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.handyMan`: Exposes CRUD operations for the **HandyMan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HandyMen
    * const handyMen = await prisma.handyMan.findMany()
    * ```
    */
  get handyMan(): Prisma.HandyManDelegate<ExtArgs>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs>;

  /**
   * `prisma.serviceHandyMan`: Exposes CRUD operations for the **ServiceHandyMan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceHandyMen
    * const serviceHandyMen = await prisma.serviceHandyMan.findMany()
    * ```
    */
  get serviceHandyMan(): Prisma.ServiceHandyManDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Customer: 'Customer',
    HandyMan: 'HandyMan',
    Service: 'Service',
    ServiceHandyMan: 'ServiceHandyMan',
    Order: 'Order',
    Feedback: 'Feedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'customer' | 'handyMan' | 'service' | 'serviceHandyMan' | 'order' | 'feedback'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      HandyMan: {
        payload: Prisma.$HandyManPayload<ExtArgs>
        fields: Prisma.HandyManFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HandyManFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HandyManFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          findFirst: {
            args: Prisma.HandyManFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HandyManFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          findMany: {
            args: Prisma.HandyManFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>[]
          }
          create: {
            args: Prisma.HandyManCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          createMany: {
            args: Prisma.HandyManCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HandyManDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          update: {
            args: Prisma.HandyManUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          deleteMany: {
            args: Prisma.HandyManDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HandyManUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HandyManUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HandyManPayload>
          }
          aggregate: {
            args: Prisma.HandyManAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHandyMan>
          }
          groupBy: {
            args: Prisma.HandyManGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HandyManGroupByOutputType>[]
          }
          count: {
            args: Prisma.HandyManCountArgs<ExtArgs>,
            result: $Utils.Optional<HandyManCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      ServiceHandyMan: {
        payload: Prisma.$ServiceHandyManPayload<ExtArgs>
        fields: Prisma.ServiceHandyManFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceHandyManFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceHandyManFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          findFirst: {
            args: Prisma.ServiceHandyManFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceHandyManFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          findMany: {
            args: Prisma.ServiceHandyManFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>[]
          }
          create: {
            args: Prisma.ServiceHandyManCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          createMany: {
            args: Prisma.ServiceHandyManCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceHandyManDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          update: {
            args: Prisma.ServiceHandyManUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          deleteMany: {
            args: Prisma.ServiceHandyManDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceHandyManUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceHandyManUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceHandyManPayload>
          }
          aggregate: {
            args: Prisma.ServiceHandyManAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceHandyMan>
          }
          groupBy: {
            args: Prisma.ServiceHandyManGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceHandyManGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceHandyManCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceHandyManCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    feedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }



  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    orders: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | CustomerCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type HandyManCountOutputType
   */

  export type HandyManCountOutputType = {
    serviceHandyMans: number
    orders: number
  }

  export type HandyManCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceHandyMans?: boolean | HandyManCountOutputTypeCountServiceHandyMansArgs
    orders?: boolean | HandyManCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * HandyManCountOutputType without action
   */
  export type HandyManCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyManCountOutputType
     */
    select?: HandyManCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HandyManCountOutputType without action
   */
  export type HandyManCountOutputTypeCountServiceHandyMansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceHandyManWhereInput
  }


  /**
   * HandyManCountOutputType without action
   */
  export type HandyManCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    serviceHandyMans: number
    orders: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceHandyMans?: boolean | ServiceCountOutputTypeCountServiceHandyMansArgs
    orders?: boolean | ServiceCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountServiceHandyMansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceHandyManWhereInput
  }


  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    feedbacks: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | OrderCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    Id: number | null
    Role: number | null
  }

  export type UserSumAggregateOutputType = {
    Id: number | null
    Role: number | null
  }

  export type UserMinAggregateOutputType = {
    Id: number | null
    Password: string | null
    Email: string | null
    Role: number | null
    CreatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    Id: number | null
    Password: string | null
    Email: string | null
    Role: number | null
    CreatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    Id: number
    Password: number
    Email: number
    Role: number
    CreatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    Id?: true
    Role?: true
  }

  export type UserSumAggregateInputType = {
    Id?: true
    Role?: true
  }

  export type UserMinAggregateInputType = {
    Id?: true
    Password?: true
    Email?: true
    Role?: true
    CreatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    Id?: true
    Password?: true
    Email?: true
    Role?: true
    CreatedAt?: true
  }

  export type UserCountAggregateInputType = {
    Id?: true
    Password?: true
    Email?: true
    Role?: true
    CreatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    Id: number
    Password: string
    Email: string
    Role: number
    CreatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    Password?: boolean
    Email?: boolean
    Role?: boolean
    CreatedAt?: boolean
    customer?: boolean | User$customerArgs<ExtArgs>
    handyMan?: boolean | User$handyManArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    Id?: boolean
    Password?: boolean
    Email?: boolean
    Role?: boolean
    CreatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | User$customerArgs<ExtArgs>
    handyMan?: boolean | User$handyManArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      handyMan: Prisma.$HandyManPayload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: number
      Password: string
      Email: string
      Role: number
      CreatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    customer<T extends User$customerArgs<ExtArgs> = {}>(args?: Subset<T, User$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    handyMan<T extends User$handyManArgs<ExtArgs> = {}>(args?: Subset<T, User$handyManArgs<ExtArgs>>): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly Id: FieldRef<"User", 'Int'>
    readonly Password: FieldRef<"User", 'String'>
    readonly Email: FieldRef<"User", 'String'>
    readonly Role: FieldRef<"User", 'Int'>
    readonly CreatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.customer
   */
  export type User$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }


  /**
   * User.handyMan
   */
  export type User$handyManArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    where?: HandyManWhereInput
  }


  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    CustomerId: number | null
    UserId: number | null
  }

  export type CustomerSumAggregateOutputType = {
    CustomerId: number | null
    UserId: number | null
  }

  export type CustomerMinAggregateOutputType = {
    CustomerId: number | null
    UserId: number | null
    Name: string | null
    PhoneNumber: string | null
    AvatarPath: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    CustomerId: number | null
    UserId: number | null
    Name: string | null
    PhoneNumber: string | null
    AvatarPath: string | null
  }

  export type CustomerCountAggregateOutputType = {
    CustomerId: number
    UserId: number
    Name: number
    PhoneNumber: number
    AvatarPath: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    CustomerId?: true
    UserId?: true
  }

  export type CustomerSumAggregateInputType = {
    CustomerId?: true
    UserId?: true
  }

  export type CustomerMinAggregateInputType = {
    CustomerId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
  }

  export type CustomerMaxAggregateInputType = {
    CustomerId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
  }

  export type CustomerCountAggregateInputType = {
    CustomerId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    CustomerId: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CustomerId?: boolean
    UserId?: boolean
    Name?: boolean
    PhoneNumber?: boolean
    AvatarPath?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    orders?: boolean | Customer$ordersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    CustomerId?: boolean
    UserId?: boolean
    Name?: boolean
    PhoneNumber?: boolean
    AvatarPath?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    orders?: boolean | Customer$ordersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CustomerId: number
      UserId: number
      Name: string
      PhoneNumber: string
      AvatarPath: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }


  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `CustomerId`
     * const customerWithCustomerIdOnly = await prisma.customer.findMany({ select: { CustomerId: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    orders<T extends Customer$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly CustomerId: FieldRef<"Customer", 'Int'>
    readonly UserId: FieldRef<"Customer", 'Int'>
    readonly Name: FieldRef<"Customer", 'String'>
    readonly PhoneNumber: FieldRef<"Customer", 'String'>
    readonly AvatarPath: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.orders
   */
  export type Customer$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
  }



  /**
   * Model HandyMan
   */

  export type AggregateHandyMan = {
    _count: HandyManCountAggregateOutputType | null
    _avg: HandyManAvgAggregateOutputType | null
    _sum: HandyManSumAggregateOutputType | null
    _min: HandyManMinAggregateOutputType | null
    _max: HandyManMaxAggregateOutputType | null
  }

  export type HandyManAvgAggregateOutputType = {
    HandyManId: number | null
    UserId: number | null
  }

  export type HandyManSumAggregateOutputType = {
    HandyManId: number | null
    UserId: number | null
  }

  export type HandyManMinAggregateOutputType = {
    HandyManId: number | null
    UserId: number | null
    Name: string | null
    PhoneNumber: string | null
    AvatarPath: string | null
  }

  export type HandyManMaxAggregateOutputType = {
    HandyManId: number | null
    UserId: number | null
    Name: string | null
    PhoneNumber: string | null
    AvatarPath: string | null
  }

  export type HandyManCountAggregateOutputType = {
    HandyManId: number
    UserId: number
    Name: number
    PhoneNumber: number
    AvatarPath: number
    _all: number
  }


  export type HandyManAvgAggregateInputType = {
    HandyManId?: true
    UserId?: true
  }

  export type HandyManSumAggregateInputType = {
    HandyManId?: true
    UserId?: true
  }

  export type HandyManMinAggregateInputType = {
    HandyManId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
  }

  export type HandyManMaxAggregateInputType = {
    HandyManId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
  }

  export type HandyManCountAggregateInputType = {
    HandyManId?: true
    UserId?: true
    Name?: true
    PhoneNumber?: true
    AvatarPath?: true
    _all?: true
  }

  export type HandyManAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandyMan to aggregate.
     */
    where?: HandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandyMen to fetch.
     */
    orderBy?: HandyManOrderByWithRelationInput | HandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HandyMen
    **/
    _count?: true | HandyManCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HandyManAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HandyManSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HandyManMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HandyManMaxAggregateInputType
  }

  export type GetHandyManAggregateType<T extends HandyManAggregateArgs> = {
        [P in keyof T & keyof AggregateHandyMan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHandyMan[P]>
      : GetScalarType<T[P], AggregateHandyMan[P]>
  }




  export type HandyManGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandyManWhereInput
    orderBy?: HandyManOrderByWithAggregationInput | HandyManOrderByWithAggregationInput[]
    by: HandyManScalarFieldEnum[] | HandyManScalarFieldEnum
    having?: HandyManScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HandyManCountAggregateInputType | true
    _avg?: HandyManAvgAggregateInputType
    _sum?: HandyManSumAggregateInputType
    _min?: HandyManMinAggregateInputType
    _max?: HandyManMaxAggregateInputType
  }

  export type HandyManGroupByOutputType = {
    HandyManId: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath: string
    _count: HandyManCountAggregateOutputType | null
    _avg: HandyManAvgAggregateOutputType | null
    _sum: HandyManSumAggregateOutputType | null
    _min: HandyManMinAggregateOutputType | null
    _max: HandyManMaxAggregateOutputType | null
  }

  type GetHandyManGroupByPayload<T extends HandyManGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HandyManGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HandyManGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HandyManGroupByOutputType[P]>
            : GetScalarType<T[P], HandyManGroupByOutputType[P]>
        }
      >
    >


  export type HandyManSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    HandyManId?: boolean
    UserId?: boolean
    Name?: boolean
    PhoneNumber?: boolean
    AvatarPath?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    serviceHandyMans?: boolean | HandyMan$serviceHandyMansArgs<ExtArgs>
    orders?: boolean | HandyMan$ordersArgs<ExtArgs>
    _count?: boolean | HandyManCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handyMan"]>

  export type HandyManSelectScalar = {
    HandyManId?: boolean
    UserId?: boolean
    Name?: boolean
    PhoneNumber?: boolean
    AvatarPath?: boolean
  }

  export type HandyManInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    serviceHandyMans?: boolean | HandyMan$serviceHandyMansArgs<ExtArgs>
    orders?: boolean | HandyMan$ordersArgs<ExtArgs>
    _count?: boolean | HandyManCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HandyManPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HandyMan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      serviceHandyMans: Prisma.$ServiceHandyManPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      HandyManId: number
      UserId: number
      Name: string
      PhoneNumber: string
      AvatarPath: string
    }, ExtArgs["result"]["handyMan"]>
    composites: {}
  }


  type HandyManGetPayload<S extends boolean | null | undefined | HandyManDefaultArgs> = $Result.GetResult<Prisma.$HandyManPayload, S>

  type HandyManCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HandyManFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HandyManCountAggregateInputType | true
    }

  export interface HandyManDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HandyMan'], meta: { name: 'HandyMan' } }
    /**
     * Find zero or one HandyMan that matches the filter.
     * @param {HandyManFindUniqueArgs} args - Arguments to find a HandyMan
     * @example
     * // Get one HandyMan
     * const handyMan = await prisma.handyMan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HandyManFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManFindUniqueArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HandyMan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HandyManFindUniqueOrThrowArgs} args - Arguments to find a HandyMan
     * @example
     * // Get one HandyMan
     * const handyMan = await prisma.handyMan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HandyManFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HandyMan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManFindFirstArgs} args - Arguments to find a HandyMan
     * @example
     * // Get one HandyMan
     * const handyMan = await prisma.handyMan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HandyManFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManFindFirstArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HandyMan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManFindFirstOrThrowArgs} args - Arguments to find a HandyMan
     * @example
     * // Get one HandyMan
     * const handyMan = await prisma.handyMan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HandyManFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HandyMen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HandyMen
     * const handyMen = await prisma.handyMan.findMany()
     * 
     * // Get first 10 HandyMen
     * const handyMen = await prisma.handyMan.findMany({ take: 10 })
     * 
     * // Only select the `HandyManId`
     * const handyManWithHandyManIdOnly = await prisma.handyMan.findMany({ select: { HandyManId: true } })
     * 
    **/
    findMany<T extends HandyManFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HandyMan.
     * @param {HandyManCreateArgs} args - Arguments to create a HandyMan.
     * @example
     * // Create one HandyMan
     * const HandyMan = await prisma.handyMan.create({
     *   data: {
     *     // ... data to create a HandyMan
     *   }
     * })
     * 
    **/
    create<T extends HandyManCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManCreateArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HandyMen.
     *     @param {HandyManCreateManyArgs} args - Arguments to create many HandyMen.
     *     @example
     *     // Create many HandyMen
     *     const handyMan = await prisma.handyMan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HandyManCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HandyMan.
     * @param {HandyManDeleteArgs} args - Arguments to delete one HandyMan.
     * @example
     * // Delete one HandyMan
     * const HandyMan = await prisma.handyMan.delete({
     *   where: {
     *     // ... filter to delete one HandyMan
     *   }
     * })
     * 
    **/
    delete<T extends HandyManDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManDeleteArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HandyMan.
     * @param {HandyManUpdateArgs} args - Arguments to update one HandyMan.
     * @example
     * // Update one HandyMan
     * const handyMan = await prisma.handyMan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HandyManUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManUpdateArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HandyMen.
     * @param {HandyManDeleteManyArgs} args - Arguments to filter HandyMen to delete.
     * @example
     * // Delete a few HandyMen
     * const { count } = await prisma.handyMan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HandyManDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HandyManDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HandyMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HandyMen
     * const handyMan = await prisma.handyMan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HandyManUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HandyMan.
     * @param {HandyManUpsertArgs} args - Arguments to update or create a HandyMan.
     * @example
     * // Update or create a HandyMan
     * const handyMan = await prisma.handyMan.upsert({
     *   create: {
     *     // ... data to create a HandyMan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HandyMan we want to update
     *   }
     * })
    **/
    upsert<T extends HandyManUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HandyManUpsertArgs<ExtArgs>>
    ): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HandyMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManCountArgs} args - Arguments to filter HandyMen to count.
     * @example
     * // Count the number of HandyMen
     * const count = await prisma.handyMan.count({
     *   where: {
     *     // ... the filter for the HandyMen we want to count
     *   }
     * })
    **/
    count<T extends HandyManCountArgs>(
      args?: Subset<T, HandyManCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HandyManCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HandyMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HandyManAggregateArgs>(args: Subset<T, HandyManAggregateArgs>): Prisma.PrismaPromise<GetHandyManAggregateType<T>>

    /**
     * Group by HandyMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandyManGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HandyManGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HandyManGroupByArgs['orderBy'] }
        : { orderBy?: HandyManGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HandyManGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHandyManGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HandyMan model
   */
  readonly fields: HandyManFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HandyMan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HandyManClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serviceHandyMans<T extends HandyMan$serviceHandyMansArgs<ExtArgs> = {}>(args?: Subset<T, HandyMan$serviceHandyMansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends HandyMan$ordersArgs<ExtArgs> = {}>(args?: Subset<T, HandyMan$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HandyMan model
   */ 
  interface HandyManFieldRefs {
    readonly HandyManId: FieldRef<"HandyMan", 'Int'>
    readonly UserId: FieldRef<"HandyMan", 'Int'>
    readonly Name: FieldRef<"HandyMan", 'String'>
    readonly PhoneNumber: FieldRef<"HandyMan", 'String'>
    readonly AvatarPath: FieldRef<"HandyMan", 'String'>
  }
    

  // Custom InputTypes

  /**
   * HandyMan findUnique
   */
  export type HandyManFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter, which HandyMan to fetch.
     */
    where: HandyManWhereUniqueInput
  }


  /**
   * HandyMan findUniqueOrThrow
   */
  export type HandyManFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter, which HandyMan to fetch.
     */
    where: HandyManWhereUniqueInput
  }


  /**
   * HandyMan findFirst
   */
  export type HandyManFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter, which HandyMan to fetch.
     */
    where?: HandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandyMen to fetch.
     */
    orderBy?: HandyManOrderByWithRelationInput | HandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandyMen.
     */
    cursor?: HandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandyMen.
     */
    distinct?: HandyManScalarFieldEnum | HandyManScalarFieldEnum[]
  }


  /**
   * HandyMan findFirstOrThrow
   */
  export type HandyManFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter, which HandyMan to fetch.
     */
    where?: HandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandyMen to fetch.
     */
    orderBy?: HandyManOrderByWithRelationInput | HandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandyMen.
     */
    cursor?: HandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandyMen.
     */
    distinct?: HandyManScalarFieldEnum | HandyManScalarFieldEnum[]
  }


  /**
   * HandyMan findMany
   */
  export type HandyManFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter, which HandyMen to fetch.
     */
    where?: HandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandyMen to fetch.
     */
    orderBy?: HandyManOrderByWithRelationInput | HandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HandyMen.
     */
    cursor?: HandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandyMen.
     */
    skip?: number
    distinct?: HandyManScalarFieldEnum | HandyManScalarFieldEnum[]
  }


  /**
   * HandyMan create
   */
  export type HandyManCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * The data needed to create a HandyMan.
     */
    data: XOR<HandyManCreateInput, HandyManUncheckedCreateInput>
  }


  /**
   * HandyMan createMany
   */
  export type HandyManCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HandyMen.
     */
    data: HandyManCreateManyInput | HandyManCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HandyMan update
   */
  export type HandyManUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * The data needed to update a HandyMan.
     */
    data: XOR<HandyManUpdateInput, HandyManUncheckedUpdateInput>
    /**
     * Choose, which HandyMan to update.
     */
    where: HandyManWhereUniqueInput
  }


  /**
   * HandyMan updateMany
   */
  export type HandyManUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HandyMen.
     */
    data: XOR<HandyManUpdateManyMutationInput, HandyManUncheckedUpdateManyInput>
    /**
     * Filter which HandyMen to update
     */
    where?: HandyManWhereInput
  }


  /**
   * HandyMan upsert
   */
  export type HandyManUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * The filter to search for the HandyMan to update in case it exists.
     */
    where: HandyManWhereUniqueInput
    /**
     * In case the HandyMan found by the `where` argument doesn't exist, create a new HandyMan with this data.
     */
    create: XOR<HandyManCreateInput, HandyManUncheckedCreateInput>
    /**
     * In case the HandyMan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HandyManUpdateInput, HandyManUncheckedUpdateInput>
  }


  /**
   * HandyMan delete
   */
  export type HandyManDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
    /**
     * Filter which HandyMan to delete.
     */
    where: HandyManWhereUniqueInput
  }


  /**
   * HandyMan deleteMany
   */
  export type HandyManDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandyMen to delete
     */
    where?: HandyManWhereInput
  }


  /**
   * HandyMan.serviceHandyMans
   */
  export type HandyMan$serviceHandyMansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    where?: ServiceHandyManWhereInput
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    cursor?: ServiceHandyManWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceHandyManScalarFieldEnum | ServiceHandyManScalarFieldEnum[]
  }


  /**
   * HandyMan.orders
   */
  export type HandyMan$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * HandyMan without action
   */
  export type HandyManDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandyMan
     */
    select?: HandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HandyManInclude<ExtArgs> | null
  }



  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    ServiceId: number | null
  }

  export type ServiceSumAggregateOutputType = {
    ServiceId: number | null
  }

  export type ServiceMinAggregateOutputType = {
    ServiceId: number | null
    ServiceType: string | null
    ServiceName: string | null
  }

  export type ServiceMaxAggregateOutputType = {
    ServiceId: number | null
    ServiceType: string | null
    ServiceName: string | null
  }

  export type ServiceCountAggregateOutputType = {
    ServiceId: number
    ServiceType: number
    ServiceName: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    ServiceId?: true
  }

  export type ServiceSumAggregateInputType = {
    ServiceId?: true
  }

  export type ServiceMinAggregateInputType = {
    ServiceId?: true
    ServiceType?: true
    ServiceName?: true
  }

  export type ServiceMaxAggregateInputType = {
    ServiceId?: true
    ServiceType?: true
    ServiceName?: true
  }

  export type ServiceCountAggregateInputType = {
    ServiceId?: true
    ServiceType?: true
    ServiceName?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    ServiceId: number
    ServiceType: string
    ServiceName: string
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ServiceId?: boolean
    ServiceType?: boolean
    ServiceName?: boolean
    serviceHandyMans?: boolean | Service$serviceHandyMansArgs<ExtArgs>
    orders?: boolean | Service$ordersArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    ServiceId?: boolean
    ServiceType?: boolean
    ServiceName?: boolean
  }

  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceHandyMans?: boolean | Service$serviceHandyMansArgs<ExtArgs>
    orders?: boolean | Service$ordersArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      serviceHandyMans: Prisma.$ServiceHandyManPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ServiceId: number
      ServiceType: string
      ServiceName: string
    }, ExtArgs["result"]["service"]>
    composites: {}
  }


  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Service that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `ServiceId`
     * const serviceWithServiceIdOnly = await prisma.service.findMany({ select: { ServiceId: true } })
     * 
    **/
    findMany<T extends ServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
    **/
    create<T extends ServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const service = await prisma.service.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
    **/
    delete<T extends ServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    serviceHandyMans<T extends Service$serviceHandyMansArgs<ExtArgs> = {}>(args?: Subset<T, Service$serviceHandyMansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends Service$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Service$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Service model
   */ 
  interface ServiceFieldRefs {
    readonly ServiceId: FieldRef<"Service", 'Int'>
    readonly ServiceType: FieldRef<"Service", 'String'>
    readonly ServiceName: FieldRef<"Service", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }


  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
  }


  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }


  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
  }


  /**
   * Service.serviceHandyMans
   */
  export type Service$serviceHandyMansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    where?: ServiceHandyManWhereInput
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    cursor?: ServiceHandyManWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceHandyManScalarFieldEnum | ServiceHandyManScalarFieldEnum[]
  }


  /**
   * Service.orders
   */
  export type Service$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
  }



  /**
   * Model ServiceHandyMan
   */

  export type AggregateServiceHandyMan = {
    _count: ServiceHandyManCountAggregateOutputType | null
    _avg: ServiceHandyManAvgAggregateOutputType | null
    _sum: ServiceHandyManSumAggregateOutputType | null
    _min: ServiceHandyManMinAggregateOutputType | null
    _max: ServiceHandyManMaxAggregateOutputType | null
  }

  export type ServiceHandyManAvgAggregateOutputType = {
    ServiceHandyManId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Price: Decimal | null
  }

  export type ServiceHandyManSumAggregateOutputType = {
    ServiceHandyManId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Price: Decimal | null
  }

  export type ServiceHandyManMinAggregateOutputType = {
    ServiceHandyManId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Message: string | null
    Price: Decimal | null
    TypePrice: string | null
  }

  export type ServiceHandyManMaxAggregateOutputType = {
    ServiceHandyManId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Message: string | null
    Price: Decimal | null
    TypePrice: string | null
  }

  export type ServiceHandyManCountAggregateOutputType = {
    ServiceHandyManId: number
    HandyManId: number
    ServiceId: number
    Message: number
    Price: number
    TypePrice: number
    Images: number
    _all: number
  }


  export type ServiceHandyManAvgAggregateInputType = {
    ServiceHandyManId?: true
    HandyManId?: true
    ServiceId?: true
    Price?: true
  }

  export type ServiceHandyManSumAggregateInputType = {
    ServiceHandyManId?: true
    HandyManId?: true
    ServiceId?: true
    Price?: true
  }

  export type ServiceHandyManMinAggregateInputType = {
    ServiceHandyManId?: true
    HandyManId?: true
    ServiceId?: true
    Message?: true
    Price?: true
    TypePrice?: true
  }

  export type ServiceHandyManMaxAggregateInputType = {
    ServiceHandyManId?: true
    HandyManId?: true
    ServiceId?: true
    Message?: true
    Price?: true
    TypePrice?: true
  }

  export type ServiceHandyManCountAggregateInputType = {
    ServiceHandyManId?: true
    HandyManId?: true
    ServiceId?: true
    Message?: true
    Price?: true
    TypePrice?: true
    Images?: true
    _all?: true
  }

  export type ServiceHandyManAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceHandyMan to aggregate.
     */
    where?: ServiceHandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHandyMen to fetch.
     */
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceHandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceHandyMen
    **/
    _count?: true | ServiceHandyManCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceHandyManAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceHandyManSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceHandyManMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceHandyManMaxAggregateInputType
  }

  export type GetServiceHandyManAggregateType<T extends ServiceHandyManAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceHandyMan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceHandyMan[P]>
      : GetScalarType<T[P], AggregateServiceHandyMan[P]>
  }




  export type ServiceHandyManGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceHandyManWhereInput
    orderBy?: ServiceHandyManOrderByWithAggregationInput | ServiceHandyManOrderByWithAggregationInput[]
    by: ServiceHandyManScalarFieldEnum[] | ServiceHandyManScalarFieldEnum
    having?: ServiceHandyManScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceHandyManCountAggregateInputType | true
    _avg?: ServiceHandyManAvgAggregateInputType
    _sum?: ServiceHandyManSumAggregateInputType
    _min?: ServiceHandyManMinAggregateInputType
    _max?: ServiceHandyManMaxAggregateInputType
  }

  export type ServiceHandyManGroupByOutputType = {
    ServiceHandyManId: number
    HandyManId: number
    ServiceId: number
    Message: string
    Price: Decimal
    TypePrice: string
    Images: string[]
    _count: ServiceHandyManCountAggregateOutputType | null
    _avg: ServiceHandyManAvgAggregateOutputType | null
    _sum: ServiceHandyManSumAggregateOutputType | null
    _min: ServiceHandyManMinAggregateOutputType | null
    _max: ServiceHandyManMaxAggregateOutputType | null
  }

  type GetServiceHandyManGroupByPayload<T extends ServiceHandyManGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceHandyManGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceHandyManGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceHandyManGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceHandyManGroupByOutputType[P]>
        }
      >
    >


  export type ServiceHandyManSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ServiceHandyManId?: boolean
    HandyManId?: boolean
    ServiceId?: boolean
    Message?: boolean
    Price?: boolean
    TypePrice?: boolean
    Images?: boolean
    handyMan?: boolean | HandyManDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceHandyMan"]>

  export type ServiceHandyManSelectScalar = {
    ServiceHandyManId?: boolean
    HandyManId?: boolean
    ServiceId?: boolean
    Message?: boolean
    Price?: boolean
    TypePrice?: boolean
    Images?: boolean
  }

  export type ServiceHandyManInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    handyMan?: boolean | HandyManDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }


  export type $ServiceHandyManPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceHandyMan"
    objects: {
      handyMan: Prisma.$HandyManPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ServiceHandyManId: number
      HandyManId: number
      ServiceId: number
      Message: string
      Price: Prisma.Decimal
      TypePrice: string
      Images: string[]
    }, ExtArgs["result"]["serviceHandyMan"]>
    composites: {}
  }


  type ServiceHandyManGetPayload<S extends boolean | null | undefined | ServiceHandyManDefaultArgs> = $Result.GetResult<Prisma.$ServiceHandyManPayload, S>

  type ServiceHandyManCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceHandyManFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceHandyManCountAggregateInputType | true
    }

  export interface ServiceHandyManDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceHandyMan'], meta: { name: 'ServiceHandyMan' } }
    /**
     * Find zero or one ServiceHandyMan that matches the filter.
     * @param {ServiceHandyManFindUniqueArgs} args - Arguments to find a ServiceHandyMan
     * @example
     * // Get one ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceHandyManFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceHandyMan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceHandyManFindUniqueOrThrowArgs} args - Arguments to find a ServiceHandyMan
     * @example
     * // Get one ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceHandyManFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceHandyMan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManFindFirstArgs} args - Arguments to find a ServiceHandyMan
     * @example
     * // Get one ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceHandyManFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceHandyMan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManFindFirstOrThrowArgs} args - Arguments to find a ServiceHandyMan
     * @example
     * // Get one ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceHandyManFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceHandyMen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceHandyMen
     * const serviceHandyMen = await prisma.serviceHandyMan.findMany()
     * 
     * // Get first 10 ServiceHandyMen
     * const serviceHandyMen = await prisma.serviceHandyMan.findMany({ take: 10 })
     * 
     * // Only select the `ServiceHandyManId`
     * const serviceHandyManWithServiceHandyManIdOnly = await prisma.serviceHandyMan.findMany({ select: { ServiceHandyManId: true } })
     * 
    **/
    findMany<T extends ServiceHandyManFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceHandyMan.
     * @param {ServiceHandyManCreateArgs} args - Arguments to create a ServiceHandyMan.
     * @example
     * // Create one ServiceHandyMan
     * const ServiceHandyMan = await prisma.serviceHandyMan.create({
     *   data: {
     *     // ... data to create a ServiceHandyMan
     *   }
     * })
     * 
    **/
    create<T extends ServiceHandyManCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManCreateArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceHandyMen.
     *     @param {ServiceHandyManCreateManyArgs} args - Arguments to create many ServiceHandyMen.
     *     @example
     *     // Create many ServiceHandyMen
     *     const serviceHandyMan = await prisma.serviceHandyMan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceHandyManCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceHandyMan.
     * @param {ServiceHandyManDeleteArgs} args - Arguments to delete one ServiceHandyMan.
     * @example
     * // Delete one ServiceHandyMan
     * const ServiceHandyMan = await prisma.serviceHandyMan.delete({
     *   where: {
     *     // ... filter to delete one ServiceHandyMan
     *   }
     * })
     * 
    **/
    delete<T extends ServiceHandyManDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManDeleteArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceHandyMan.
     * @param {ServiceHandyManUpdateArgs} args - Arguments to update one ServiceHandyMan.
     * @example
     * // Update one ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceHandyManUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManUpdateArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceHandyMen.
     * @param {ServiceHandyManDeleteManyArgs} args - Arguments to filter ServiceHandyMen to delete.
     * @example
     * // Delete a few ServiceHandyMen
     * const { count } = await prisma.serviceHandyMan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceHandyManDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceHandyManDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceHandyMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceHandyMen
     * const serviceHandyMan = await prisma.serviceHandyMan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceHandyManUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceHandyMan.
     * @param {ServiceHandyManUpsertArgs} args - Arguments to update or create a ServiceHandyMan.
     * @example
     * // Update or create a ServiceHandyMan
     * const serviceHandyMan = await prisma.serviceHandyMan.upsert({
     *   create: {
     *     // ... data to create a ServiceHandyMan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceHandyMan we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceHandyManUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceHandyManUpsertArgs<ExtArgs>>
    ): Prisma__ServiceHandyManClient<$Result.GetResult<Prisma.$ServiceHandyManPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceHandyMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManCountArgs} args - Arguments to filter ServiceHandyMen to count.
     * @example
     * // Count the number of ServiceHandyMen
     * const count = await prisma.serviceHandyMan.count({
     *   where: {
     *     // ... the filter for the ServiceHandyMen we want to count
     *   }
     * })
    **/
    count<T extends ServiceHandyManCountArgs>(
      args?: Subset<T, ServiceHandyManCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceHandyManCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceHandyMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceHandyManAggregateArgs>(args: Subset<T, ServiceHandyManAggregateArgs>): Prisma.PrismaPromise<GetServiceHandyManAggregateType<T>>

    /**
     * Group by ServiceHandyMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHandyManGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceHandyManGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceHandyManGroupByArgs['orderBy'] }
        : { orderBy?: ServiceHandyManGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceHandyManGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceHandyManGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceHandyMan model
   */
  readonly fields: ServiceHandyManFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceHandyMan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceHandyManClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    handyMan<T extends HandyManDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HandyManDefaultArgs<ExtArgs>>): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ServiceHandyMan model
   */ 
  interface ServiceHandyManFieldRefs {
    readonly ServiceHandyManId: FieldRef<"ServiceHandyMan", 'Int'>
    readonly HandyManId: FieldRef<"ServiceHandyMan", 'Int'>
    readonly ServiceId: FieldRef<"ServiceHandyMan", 'Int'>
    readonly Message: FieldRef<"ServiceHandyMan", 'String'>
    readonly Price: FieldRef<"ServiceHandyMan", 'Decimal'>
    readonly TypePrice: FieldRef<"ServiceHandyMan", 'String'>
    readonly Images: FieldRef<"ServiceHandyMan", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * ServiceHandyMan findUnique
   */
  export type ServiceHandyManFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter, which ServiceHandyMan to fetch.
     */
    where: ServiceHandyManWhereUniqueInput
  }


  /**
   * ServiceHandyMan findUniqueOrThrow
   */
  export type ServiceHandyManFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter, which ServiceHandyMan to fetch.
     */
    where: ServiceHandyManWhereUniqueInput
  }


  /**
   * ServiceHandyMan findFirst
   */
  export type ServiceHandyManFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter, which ServiceHandyMan to fetch.
     */
    where?: ServiceHandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHandyMen to fetch.
     */
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceHandyMen.
     */
    cursor?: ServiceHandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceHandyMen.
     */
    distinct?: ServiceHandyManScalarFieldEnum | ServiceHandyManScalarFieldEnum[]
  }


  /**
   * ServiceHandyMan findFirstOrThrow
   */
  export type ServiceHandyManFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter, which ServiceHandyMan to fetch.
     */
    where?: ServiceHandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHandyMen to fetch.
     */
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceHandyMen.
     */
    cursor?: ServiceHandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHandyMen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceHandyMen.
     */
    distinct?: ServiceHandyManScalarFieldEnum | ServiceHandyManScalarFieldEnum[]
  }


  /**
   * ServiceHandyMan findMany
   */
  export type ServiceHandyManFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter, which ServiceHandyMen to fetch.
     */
    where?: ServiceHandyManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHandyMen to fetch.
     */
    orderBy?: ServiceHandyManOrderByWithRelationInput | ServiceHandyManOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceHandyMen.
     */
    cursor?: ServiceHandyManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHandyMen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHandyMen.
     */
    skip?: number
    distinct?: ServiceHandyManScalarFieldEnum | ServiceHandyManScalarFieldEnum[]
  }


  /**
   * ServiceHandyMan create
   */
  export type ServiceHandyManCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceHandyMan.
     */
    data: XOR<ServiceHandyManCreateInput, ServiceHandyManUncheckedCreateInput>
  }


  /**
   * ServiceHandyMan createMany
   */
  export type ServiceHandyManCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceHandyMen.
     */
    data: ServiceHandyManCreateManyInput | ServiceHandyManCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ServiceHandyMan update
   */
  export type ServiceHandyManUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceHandyMan.
     */
    data: XOR<ServiceHandyManUpdateInput, ServiceHandyManUncheckedUpdateInput>
    /**
     * Choose, which ServiceHandyMan to update.
     */
    where: ServiceHandyManWhereUniqueInput
  }


  /**
   * ServiceHandyMan updateMany
   */
  export type ServiceHandyManUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceHandyMen.
     */
    data: XOR<ServiceHandyManUpdateManyMutationInput, ServiceHandyManUncheckedUpdateManyInput>
    /**
     * Filter which ServiceHandyMen to update
     */
    where?: ServiceHandyManWhereInput
  }


  /**
   * ServiceHandyMan upsert
   */
  export type ServiceHandyManUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceHandyMan to update in case it exists.
     */
    where: ServiceHandyManWhereUniqueInput
    /**
     * In case the ServiceHandyMan found by the `where` argument doesn't exist, create a new ServiceHandyMan with this data.
     */
    create: XOR<ServiceHandyManCreateInput, ServiceHandyManUncheckedCreateInput>
    /**
     * In case the ServiceHandyMan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceHandyManUpdateInput, ServiceHandyManUncheckedUpdateInput>
  }


  /**
   * ServiceHandyMan delete
   */
  export type ServiceHandyManDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
    /**
     * Filter which ServiceHandyMan to delete.
     */
    where: ServiceHandyManWhereUniqueInput
  }


  /**
   * ServiceHandyMan deleteMany
   */
  export type ServiceHandyManDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceHandyMen to delete
     */
    where?: ServiceHandyManWhereInput
  }


  /**
   * ServiceHandyMan without action
   */
  export type ServiceHandyManDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHandyMan
     */
    select?: ServiceHandyManSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceHandyManInclude<ExtArgs> | null
  }



  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    OrderId: number | null
    CustomerId: number | null
    HandyManId: number | null
    ServiceId: number | null
  }

  export type OrderSumAggregateOutputType = {
    OrderId: number | null
    CustomerId: number | null
    HandyManId: number | null
    ServiceId: number | null
  }

  export type OrderMinAggregateOutputType = {
    OrderId: number | null
    CustomerId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Address: string | null
    Message: string | null
    Status: $Enums.EnumOrderStatus | null
    Created_At: Date | null
    UpdatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    OrderId: number | null
    CustomerId: number | null
    HandyManId: number | null
    ServiceId: number | null
    Address: string | null
    Message: string | null
    Status: $Enums.EnumOrderStatus | null
    Created_At: Date | null
    UpdatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    OrderId: number
    CustomerId: number
    HandyManId: number
    ServiceId: number
    Images: number
    Address: number
    Message: number
    Status: number
    Created_At: number
    UpdatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    OrderId?: true
    CustomerId?: true
    HandyManId?: true
    ServiceId?: true
  }

  export type OrderSumAggregateInputType = {
    OrderId?: true
    CustomerId?: true
    HandyManId?: true
    ServiceId?: true
  }

  export type OrderMinAggregateInputType = {
    OrderId?: true
    CustomerId?: true
    HandyManId?: true
    ServiceId?: true
    Address?: true
    Message?: true
    Status?: true
    Created_At?: true
    UpdatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    OrderId?: true
    CustomerId?: true
    HandyManId?: true
    ServiceId?: true
    Address?: true
    Message?: true
    Status?: true
    Created_At?: true
    UpdatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    OrderId?: true
    CustomerId?: true
    HandyManId?: true
    ServiceId?: true
    Images?: true
    Address?: true
    Message?: true
    Status?: true
    Created_At?: true
    UpdatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    OrderId: number
    CustomerId: number
    HandyManId: number
    ServiceId: number
    Images: string[]
    Address: string
    Message: string
    Status: $Enums.EnumOrderStatus
    Created_At: Date
    UpdatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    OrderId?: boolean
    CustomerId?: boolean
    HandyManId?: boolean
    ServiceId?: boolean
    Images?: boolean
    Address?: boolean
    Message?: boolean
    Status?: boolean
    Created_At?: boolean
    UpdatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    handyMan?: boolean | HandyManDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    feedbacks?: boolean | Order$feedbacksArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    OrderId?: boolean
    CustomerId?: boolean
    HandyManId?: boolean
    ServiceId?: boolean
    Images?: boolean
    Address?: boolean
    Message?: boolean
    Status?: boolean
    Created_At?: boolean
    UpdatedAt?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    handyMan?: boolean | HandyManDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    feedbacks?: boolean | Order$feedbacksArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      handyMan: Prisma.$HandyManPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      OrderId: number
      CustomerId: number
      HandyManId: number
      ServiceId: number
      Images: string[]
      Address: string
      Message: string
      Status: $Enums.EnumOrderStatus
      Created_At: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }


  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `OrderId`
     * const orderWithOrderIdOnly = await prisma.order.findMany({ select: { OrderId: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    handyMan<T extends HandyManDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HandyManDefaultArgs<ExtArgs>>): Prisma__HandyManClient<$Result.GetResult<Prisma.$HandyManPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    feedbacks<T extends Order$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Order$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly OrderId: FieldRef<"Order", 'Int'>
    readonly CustomerId: FieldRef<"Order", 'Int'>
    readonly HandyManId: FieldRef<"Order", 'Int'>
    readonly ServiceId: FieldRef<"Order", 'Int'>
    readonly Images: FieldRef<"Order", 'String[]'>
    readonly Address: FieldRef<"Order", 'String'>
    readonly Message: FieldRef<"Order", 'String'>
    readonly Status: FieldRef<"Order", 'EnumOrderStatus'>
    readonly Created_At: FieldRef<"Order", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order.feedbacks
   */
  export type Order$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
  }



  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    FeedbackId: number | null
    UserIdFrom: number | null
    UserIdTo: number | null
    OrderId: number | null
    Rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    FeedbackId: number | null
    UserIdFrom: number | null
    UserIdTo: number | null
    OrderId: number | null
    Rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    FeedbackId: number | null
    UserIdFrom: number | null
    UserIdTo: number | null
    OrderId: number | null
    Message: string | null
    Rating: number | null
  }

  export type FeedbackMaxAggregateOutputType = {
    FeedbackId: number | null
    UserIdFrom: number | null
    UserIdTo: number | null
    OrderId: number | null
    Message: string | null
    Rating: number | null
  }

  export type FeedbackCountAggregateOutputType = {
    FeedbackId: number
    UserIdFrom: number
    UserIdTo: number
    OrderId: number
    Message: number
    Rating: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    FeedbackId?: true
    UserIdFrom?: true
    UserIdTo?: true
    OrderId?: true
    Rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    FeedbackId?: true
    UserIdFrom?: true
    UserIdTo?: true
    OrderId?: true
    Rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    FeedbackId?: true
    UserIdFrom?: true
    UserIdTo?: true
    OrderId?: true
    Message?: true
    Rating?: true
  }

  export type FeedbackMaxAggregateInputType = {
    FeedbackId?: true
    UserIdFrom?: true
    UserIdTo?: true
    OrderId?: true
    Message?: true
    Rating?: true
  }

  export type FeedbackCountAggregateInputType = {
    FeedbackId?: true
    UserIdFrom?: true
    UserIdTo?: true
    OrderId?: true
    Message?: true
    Rating?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    FeedbackId: number
    UserIdFrom: number
    UserIdTo: number
    OrderId: number
    Message: string
    Rating: number
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    FeedbackId?: boolean
    UserIdFrom?: boolean
    UserIdTo?: boolean
    OrderId?: boolean
    Message?: boolean
    Rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    FeedbackId?: boolean
    UserIdFrom?: boolean
    UserIdTo?: boolean
    OrderId?: boolean
    Message?: boolean
    Rating?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }


  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      FeedbackId: number
      UserIdFrom: number
      UserIdTo: number
      OrderId: number
      Message: string
      Rating: number
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }


  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `FeedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.findMany({ select: { FeedbackId: true } })
     * 
    **/
    findMany<T extends FeedbackFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
    **/
    create<T extends FeedbackCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Feedbacks.
     *     @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     *     @example
     *     // Create many Feedbacks
     *     const feedback = await prisma.feedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly FeedbackId: FieldRef<"Feedback", 'Int'>
    readonly UserIdFrom: FieldRef<"Feedback", 'Int'>
    readonly UserIdTo: FieldRef<"Feedback", 'Int'>
    readonly OrderId: FieldRef<"Feedback", 'Int'>
    readonly Message: FieldRef<"Feedback", 'String'>
    readonly Rating: FieldRef<"Feedback", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }


  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }


  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    Id: 'Id',
    Password: 'Password',
    Email: 'Email',
    Role: 'Role',
    CreatedAt: 'CreatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    CustomerId: 'CustomerId',
    UserId: 'UserId',
    Name: 'Name',
    PhoneNumber: 'PhoneNumber',
    AvatarPath: 'AvatarPath'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const HandyManScalarFieldEnum: {
    HandyManId: 'HandyManId',
    UserId: 'UserId',
    Name: 'Name',
    PhoneNumber: 'PhoneNumber',
    AvatarPath: 'AvatarPath'
  };

  export type HandyManScalarFieldEnum = (typeof HandyManScalarFieldEnum)[keyof typeof HandyManScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    ServiceId: 'ServiceId',
    ServiceType: 'ServiceType',
    ServiceName: 'ServiceName'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const ServiceHandyManScalarFieldEnum: {
    ServiceHandyManId: 'ServiceHandyManId',
    HandyManId: 'HandyManId',
    ServiceId: 'ServiceId',
    Message: 'Message',
    Price: 'Price',
    TypePrice: 'TypePrice',
    Images: 'Images'
  };

  export type ServiceHandyManScalarFieldEnum = (typeof ServiceHandyManScalarFieldEnum)[keyof typeof ServiceHandyManScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    OrderId: 'OrderId',
    CustomerId: 'CustomerId',
    HandyManId: 'HandyManId',
    ServiceId: 'ServiceId',
    Images: 'Images',
    Address: 'Address',
    Message: 'Message',
    Status: 'Status',
    Created_At: 'Created_At',
    UpdatedAt: 'UpdatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    FeedbackId: 'FeedbackId',
    UserIdFrom: 'UserIdFrom',
    UserIdTo: 'UserIdTo',
    OrderId: 'OrderId',
    Message: 'Message',
    Rating: 'Rating'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'EnumOrderStatus'
   */
  export type EnumEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnumOrderStatus'>
    


  /**
   * Reference to a field of type 'EnumOrderStatus[]'
   */
  export type ListEnumEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnumOrderStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    Id?: IntFilter<"User"> | number
    Password?: StringFilter<"User"> | string
    Email?: StringFilter<"User"> | string
    Role?: IntFilter<"User"> | number
    CreatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    handyMan?: XOR<HandyManNullableRelationFilter, HandyManWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    Id?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    handyMan?: HandyManOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    Id?: number
    Email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    Password?: StringFilter<"User"> | string
    Role?: IntFilter<"User"> | number
    CreatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    handyMan?: XOR<HandyManNullableRelationFilter, HandyManWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
  }, "Id" | "Email">

  export type UserOrderByWithAggregationInput = {
    Id?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    Id?: IntWithAggregatesFilter<"User"> | number
    Password?: StringWithAggregatesFilter<"User"> | string
    Email?: StringWithAggregatesFilter<"User"> | string
    Role?: IntWithAggregatesFilter<"User"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    CustomerId?: IntFilter<"Customer"> | number
    UserId?: IntFilter<"Customer"> | number
    Name?: StringFilter<"Customer"> | string
    PhoneNumber?: StringFilter<"Customer"> | string
    AvatarPath?: StringFilter<"Customer"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    orders?: OrderListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
    user?: UserOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    CustomerId?: number
    UserId?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    Name?: StringFilter<"Customer"> | string
    PhoneNumber?: StringFilter<"Customer"> | string
    AvatarPath?: StringFilter<"Customer"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    orders?: OrderListRelationFilter
  }, "CustomerId" | "UserId">

  export type CustomerOrderByWithAggregationInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    CustomerId?: IntWithAggregatesFilter<"Customer"> | number
    UserId?: IntWithAggregatesFilter<"Customer"> | number
    Name?: StringWithAggregatesFilter<"Customer"> | string
    PhoneNumber?: StringWithAggregatesFilter<"Customer"> | string
    AvatarPath?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type HandyManWhereInput = {
    AND?: HandyManWhereInput | HandyManWhereInput[]
    OR?: HandyManWhereInput[]
    NOT?: HandyManWhereInput | HandyManWhereInput[]
    HandyManId?: IntFilter<"HandyMan"> | number
    UserId?: IntFilter<"HandyMan"> | number
    Name?: StringFilter<"HandyMan"> | string
    PhoneNumber?: StringFilter<"HandyMan"> | string
    AvatarPath?: StringFilter<"HandyMan"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    serviceHandyMans?: ServiceHandyManListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type HandyManOrderByWithRelationInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
    user?: UserOrderByWithRelationInput
    serviceHandyMans?: ServiceHandyManOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type HandyManWhereUniqueInput = Prisma.AtLeast<{
    HandyManId?: number
    UserId?: number
    AND?: HandyManWhereInput | HandyManWhereInput[]
    OR?: HandyManWhereInput[]
    NOT?: HandyManWhereInput | HandyManWhereInput[]
    Name?: StringFilter<"HandyMan"> | string
    PhoneNumber?: StringFilter<"HandyMan"> | string
    AvatarPath?: StringFilter<"HandyMan"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    serviceHandyMans?: ServiceHandyManListRelationFilter
    orders?: OrderListRelationFilter
  }, "HandyManId" | "UserId">

  export type HandyManOrderByWithAggregationInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
    _count?: HandyManCountOrderByAggregateInput
    _avg?: HandyManAvgOrderByAggregateInput
    _max?: HandyManMaxOrderByAggregateInput
    _min?: HandyManMinOrderByAggregateInput
    _sum?: HandyManSumOrderByAggregateInput
  }

  export type HandyManScalarWhereWithAggregatesInput = {
    AND?: HandyManScalarWhereWithAggregatesInput | HandyManScalarWhereWithAggregatesInput[]
    OR?: HandyManScalarWhereWithAggregatesInput[]
    NOT?: HandyManScalarWhereWithAggregatesInput | HandyManScalarWhereWithAggregatesInput[]
    HandyManId?: IntWithAggregatesFilter<"HandyMan"> | number
    UserId?: IntWithAggregatesFilter<"HandyMan"> | number
    Name?: StringWithAggregatesFilter<"HandyMan"> | string
    PhoneNumber?: StringWithAggregatesFilter<"HandyMan"> | string
    AvatarPath?: StringWithAggregatesFilter<"HandyMan"> | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    ServiceId?: IntFilter<"Service"> | number
    ServiceType?: StringFilter<"Service"> | string
    ServiceName?: StringFilter<"Service"> | string
    serviceHandyMans?: ServiceHandyManListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    ServiceId?: SortOrder
    ServiceType?: SortOrder
    ServiceName?: SortOrder
    serviceHandyMans?: ServiceHandyManOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    ServiceId?: number
    ServiceName?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    ServiceType?: StringFilter<"Service"> | string
    serviceHandyMans?: ServiceHandyManListRelationFilter
    orders?: OrderListRelationFilter
  }, "ServiceId" | "ServiceName">

  export type ServiceOrderByWithAggregationInput = {
    ServiceId?: SortOrder
    ServiceType?: SortOrder
    ServiceName?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    ServiceId?: IntWithAggregatesFilter<"Service"> | number
    ServiceType?: StringWithAggregatesFilter<"Service"> | string
    ServiceName?: StringWithAggregatesFilter<"Service"> | string
  }

  export type ServiceHandyManWhereInput = {
    AND?: ServiceHandyManWhereInput | ServiceHandyManWhereInput[]
    OR?: ServiceHandyManWhereInput[]
    NOT?: ServiceHandyManWhereInput | ServiceHandyManWhereInput[]
    ServiceHandyManId?: IntFilter<"ServiceHandyMan"> | number
    HandyManId?: IntFilter<"ServiceHandyMan"> | number
    ServiceId?: IntFilter<"ServiceHandyMan"> | number
    Message?: StringFilter<"ServiceHandyMan"> | string
    Price?: DecimalFilter<"ServiceHandyMan"> | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFilter<"ServiceHandyMan"> | string
    Images?: StringNullableListFilter<"ServiceHandyMan">
    handyMan?: XOR<HandyManRelationFilter, HandyManWhereInput>
    service?: XOR<ServiceRelationFilter, ServiceWhereInput>
  }

  export type ServiceHandyManOrderByWithRelationInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Message?: SortOrder
    Price?: SortOrder
    TypePrice?: SortOrder
    Images?: SortOrder
    handyMan?: HandyManOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type ServiceHandyManWhereUniqueInput = Prisma.AtLeast<{
    ServiceHandyManId?: number
    AND?: ServiceHandyManWhereInput | ServiceHandyManWhereInput[]
    OR?: ServiceHandyManWhereInput[]
    NOT?: ServiceHandyManWhereInput | ServiceHandyManWhereInput[]
    HandyManId?: IntFilter<"ServiceHandyMan"> | number
    ServiceId?: IntFilter<"ServiceHandyMan"> | number
    Message?: StringFilter<"ServiceHandyMan"> | string
    Price?: DecimalFilter<"ServiceHandyMan"> | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFilter<"ServiceHandyMan"> | string
    Images?: StringNullableListFilter<"ServiceHandyMan">
    handyMan?: XOR<HandyManRelationFilter, HandyManWhereInput>
    service?: XOR<ServiceRelationFilter, ServiceWhereInput>
  }, "ServiceHandyManId">

  export type ServiceHandyManOrderByWithAggregationInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Message?: SortOrder
    Price?: SortOrder
    TypePrice?: SortOrder
    Images?: SortOrder
    _count?: ServiceHandyManCountOrderByAggregateInput
    _avg?: ServiceHandyManAvgOrderByAggregateInput
    _max?: ServiceHandyManMaxOrderByAggregateInput
    _min?: ServiceHandyManMinOrderByAggregateInput
    _sum?: ServiceHandyManSumOrderByAggregateInput
  }

  export type ServiceHandyManScalarWhereWithAggregatesInput = {
    AND?: ServiceHandyManScalarWhereWithAggregatesInput | ServiceHandyManScalarWhereWithAggregatesInput[]
    OR?: ServiceHandyManScalarWhereWithAggregatesInput[]
    NOT?: ServiceHandyManScalarWhereWithAggregatesInput | ServiceHandyManScalarWhereWithAggregatesInput[]
    ServiceHandyManId?: IntWithAggregatesFilter<"ServiceHandyMan"> | number
    HandyManId?: IntWithAggregatesFilter<"ServiceHandyMan"> | number
    ServiceId?: IntWithAggregatesFilter<"ServiceHandyMan"> | number
    Message?: StringWithAggregatesFilter<"ServiceHandyMan"> | string
    Price?: DecimalWithAggregatesFilter<"ServiceHandyMan"> | Decimal | DecimalJsLike | number | string
    TypePrice?: StringWithAggregatesFilter<"ServiceHandyMan"> | string
    Images?: StringNullableListFilter<"ServiceHandyMan">
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    OrderId?: IntFilter<"Order"> | number
    CustomerId?: IntFilter<"Order"> | number
    HandyManId?: IntFilter<"Order"> | number
    ServiceId?: IntFilter<"Order"> | number
    Images?: StringNullableListFilter<"Order">
    Address?: StringFilter<"Order"> | string
    Message?: StringFilter<"Order"> | string
    Status?: EnumEnumOrderStatusFilter<"Order"> | $Enums.EnumOrderStatus
    Created_At?: DateTimeFilter<"Order"> | Date | string
    UpdatedAt?: DateTimeFilter<"Order"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    handyMan?: XOR<HandyManRelationFilter, HandyManWhereInput>
    service?: XOR<ServiceRelationFilter, ServiceWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Images?: SortOrder
    Address?: SortOrder
    Message?: SortOrder
    Status?: SortOrder
    Created_At?: SortOrder
    UpdatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    handyMan?: HandyManOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    OrderId?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    CustomerId?: IntFilter<"Order"> | number
    HandyManId?: IntFilter<"Order"> | number
    ServiceId?: IntFilter<"Order"> | number
    Images?: StringNullableListFilter<"Order">
    Address?: StringFilter<"Order"> | string
    Message?: StringFilter<"Order"> | string
    Status?: EnumEnumOrderStatusFilter<"Order"> | $Enums.EnumOrderStatus
    Created_At?: DateTimeFilter<"Order"> | Date | string
    UpdatedAt?: DateTimeFilter<"Order"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    handyMan?: XOR<HandyManRelationFilter, HandyManWhereInput>
    service?: XOR<ServiceRelationFilter, ServiceWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }, "OrderId">

  export type OrderOrderByWithAggregationInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Images?: SortOrder
    Address?: SortOrder
    Message?: SortOrder
    Status?: SortOrder
    Created_At?: SortOrder
    UpdatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OrderId?: IntWithAggregatesFilter<"Order"> | number
    CustomerId?: IntWithAggregatesFilter<"Order"> | number
    HandyManId?: IntWithAggregatesFilter<"Order"> | number
    ServiceId?: IntWithAggregatesFilter<"Order"> | number
    Images?: StringNullableListFilter<"Order">
    Address?: StringWithAggregatesFilter<"Order"> | string
    Message?: StringWithAggregatesFilter<"Order"> | string
    Status?: EnumEnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.EnumOrderStatus
    Created_At?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    FeedbackId?: IntFilter<"Feedback"> | number
    UserIdFrom?: IntFilter<"Feedback"> | number
    UserIdTo?: IntFilter<"Feedback"> | number
    OrderId?: IntFilter<"Feedback"> | number
    Message?: StringFilter<"Feedback"> | string
    Rating?: IntFilter<"Feedback"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Message?: SortOrder
    Rating?: SortOrder
    user?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    FeedbackId?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    UserIdFrom?: IntFilter<"Feedback"> | number
    UserIdTo?: IntFilter<"Feedback"> | number
    OrderId?: IntFilter<"Feedback"> | number
    Message?: StringFilter<"Feedback"> | string
    Rating?: IntFilter<"Feedback"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<OrderRelationFilter, OrderWhereInput>
  }, "FeedbackId">

  export type FeedbackOrderByWithAggregationInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Message?: SortOrder
    Rating?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    FeedbackId?: IntWithAggregatesFilter<"Feedback"> | number
    UserIdFrom?: IntWithAggregatesFilter<"Feedback"> | number
    UserIdTo?: IntWithAggregatesFilter<"Feedback"> | number
    OrderId?: IntWithAggregatesFilter<"Feedback"> | number
    Message?: StringWithAggregatesFilter<"Feedback"> | string
    Rating?: IntWithAggregatesFilter<"Feedback"> | number
  }

  export type UserCreateInput = {
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
    handyMan?: HandyManCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    Id?: number
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    handyMan?: HandyManUncheckedCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
    handyMan?: HandyManUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    handyMan?: HandyManUncheckedUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    Id?: number
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    user: UserCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    CustomerId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    CustomerId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    CustomerId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
  }

  export type CustomerUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    CustomerId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
  }

  export type HandyManCreateInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    user: UserCreateNestedOneWithoutHandyManInput
    serviceHandyMans?: ServiceHandyManCreateNestedManyWithoutHandyManInput
    orders?: OrderCreateNestedManyWithoutHandyManInput
  }

  export type HandyManUncheckedCreateInput = {
    HandyManId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    serviceHandyMans?: ServiceHandyManUncheckedCreateNestedManyWithoutHandyManInput
    orders?: OrderUncheckedCreateNestedManyWithoutHandyManInput
  }

  export type HandyManUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHandyManNestedInput
    serviceHandyMans?: ServiceHandyManUpdateManyWithoutHandyManNestedInput
    orders?: OrderUpdateManyWithoutHandyManNestedInput
  }

  export type HandyManUncheckedUpdateInput = {
    HandyManId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUncheckedUpdateManyWithoutHandyManNestedInput
    orders?: OrderUncheckedUpdateManyWithoutHandyManNestedInput
  }

  export type HandyManCreateManyInput = {
    HandyManId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
  }

  export type HandyManUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
  }

  export type HandyManUncheckedUpdateManyInput = {
    HandyManId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCreateInput = {
    ServiceType: string
    ServiceName: string
    serviceHandyMans?: ServiceHandyManCreateNestedManyWithoutServiceInput
    orders?: OrderCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    ServiceId?: number
    ServiceType: string
    ServiceName: string
    serviceHandyMans?: ServiceHandyManUncheckedCreateNestedManyWithoutServiceInput
    orders?: OrderUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUpdateManyWithoutServiceNestedInput
    orders?: OrderUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    ServiceId?: IntFieldUpdateOperationsInput | number
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUncheckedUpdateManyWithoutServiceNestedInput
    orders?: OrderUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    ServiceId?: number
    ServiceType: string
    ServiceName: string
  }

  export type ServiceUpdateManyMutationInput = {
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    ServiceId?: IntFieldUpdateOperationsInput | number
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceHandyManCreateInput = {
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
    handyMan: HandyManCreateNestedOneWithoutServiceHandyMansInput
    service: ServiceCreateNestedOneWithoutServiceHandyMansInput
  }

  export type ServiceHandyManUncheckedCreateInput = {
    ServiceHandyManId?: number
    HandyManId: number
    ServiceId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type ServiceHandyManUpdateInput = {
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
    handyMan?: HandyManUpdateOneRequiredWithoutServiceHandyMansNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceHandyMansNestedInput
  }

  export type ServiceHandyManUncheckedUpdateInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type ServiceHandyManCreateManyInput = {
    ServiceHandyManId?: number
    HandyManId: number
    ServiceId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type ServiceHandyManUpdateManyMutationInput = {
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type ServiceHandyManUncheckedUpdateManyInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type OrderCreateInput = {
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    handyMan: HandyManCreateNestedOneWithoutOrdersInput
    service: ServiceCreateNestedOneWithoutOrdersInput
    feedbacks?: FeedbackCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    OrderId?: number
    CustomerId: number
    HandyManId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    handyMan?: HandyManUpdateOneRequiredWithoutOrdersNestedInput
    service?: ServiceUpdateOneRequiredWithoutOrdersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    OrderId?: number
    CustomerId: number
    HandyManId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    UserIdFrom: number
    Message: string
    Rating: number
    user: UserCreateNestedOneWithoutFeedbacksInput
    order: OrderCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    FeedbackId?: number
    UserIdFrom: number
    UserIdTo: number
    OrderId: number
    Message: string
    Rating: number
  }

  export type FeedbackUpdateInput = {
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    order?: OrderUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    UserIdTo?: IntFieldUpdateOperationsInput | number
    OrderId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateManyInput = {
    FeedbackId?: number
    UserIdFrom: number
    UserIdTo: number
    OrderId: number
    Message: string
    Rating: number
  }

  export type FeedbackUpdateManyMutationInput = {
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    UserIdTo?: IntFieldUpdateOperationsInput | number
    OrderId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CustomerNullableRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type HandyManNullableRelationFilter = {
    is?: HandyManWhereInput | null
    isNot?: HandyManWhereInput | null
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    Id?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    Id?: SortOrder
    Role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    Id?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    Id?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Role?: SortOrder
    CreatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    Id?: SortOrder
    Role?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    CustomerId?: SortOrder
    UserId?: SortOrder
  }

  export type ServiceHandyManListRelationFilter = {
    every?: ServiceHandyManWhereInput
    some?: ServiceHandyManWhereInput
    none?: ServiceHandyManWhereInput
  }

  export type ServiceHandyManOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HandyManCountOrderByAggregateInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type HandyManAvgOrderByAggregateInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
  }

  export type HandyManMaxOrderByAggregateInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type HandyManMinOrderByAggregateInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
    Name?: SortOrder
    PhoneNumber?: SortOrder
    AvatarPath?: SortOrder
  }

  export type HandyManSumOrderByAggregateInput = {
    HandyManId?: SortOrder
    UserId?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    ServiceId?: SortOrder
    ServiceType?: SortOrder
    ServiceName?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    ServiceId?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    ServiceId?: SortOrder
    ServiceType?: SortOrder
    ServiceName?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    ServiceId?: SortOrder
    ServiceType?: SortOrder
    ServiceName?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    ServiceId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type HandyManRelationFilter = {
    is?: HandyManWhereInput
    isNot?: HandyManWhereInput
  }

  export type ServiceRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type ServiceHandyManCountOrderByAggregateInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Message?: SortOrder
    Price?: SortOrder
    TypePrice?: SortOrder
    Images?: SortOrder
  }

  export type ServiceHandyManAvgOrderByAggregateInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Price?: SortOrder
  }

  export type ServiceHandyManMaxOrderByAggregateInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Message?: SortOrder
    Price?: SortOrder
    TypePrice?: SortOrder
  }

  export type ServiceHandyManMinOrderByAggregateInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Message?: SortOrder
    Price?: SortOrder
    TypePrice?: SortOrder
  }

  export type ServiceHandyManSumOrderByAggregateInput = {
    ServiceHandyManId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnumOrderStatus | EnumEnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnumOrderStatusFilter<$PrismaModel> | $Enums.EnumOrderStatus
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Images?: SortOrder
    Address?: SortOrder
    Message?: SortOrder
    Status?: SortOrder
    Created_At?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Address?: SortOrder
    Message?: SortOrder
    Status?: SortOrder
    Created_At?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
    Address?: SortOrder
    Message?: SortOrder
    Status?: SortOrder
    Created_At?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    OrderId?: SortOrder
    CustomerId?: SortOrder
    HandyManId?: SortOrder
    ServiceId?: SortOrder
  }

  export type EnumEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnumOrderStatus | EnumEnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnumOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Message?: SortOrder
    Rating?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Message?: SortOrder
    Rating?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Message?: SortOrder
    Rating?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    FeedbackId?: SortOrder
    UserIdFrom?: SortOrder
    UserIdTo?: SortOrder
    OrderId?: SortOrder
    Rating?: SortOrder
  }

  export type CustomerCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type HandyManCreateNestedOneWithoutUserInput = {
    create?: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutUserInput
    connect?: HandyManWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type HandyManUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutUserInput
    connect?: HandyManWhereUniqueInput
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CustomerUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type HandyManUpdateOneWithoutUserNestedInput = {
    create?: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutUserInput
    upsert?: HandyManUpsertWithoutUserInput
    disconnect?: HandyManWhereInput | boolean
    delete?: HandyManWhereInput | boolean
    connect?: HandyManWhereUniqueInput
    update?: XOR<XOR<HandyManUpdateToOneWithWhereWithoutUserInput, HandyManUpdateWithoutUserInput>, HandyManUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type HandyManUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutUserInput
    upsert?: HandyManUpsertWithoutUserInput
    disconnect?: HandyManWhereInput | boolean
    delete?: HandyManWhereInput | boolean
    connect?: HandyManWhereUniqueInput
    update?: XOR<XOR<HandyManUpdateToOneWithWhereWithoutUserInput, HandyManUpdateWithoutUserInput>, HandyManUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCustomerInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    upsert?: UserUpsertWithoutCustomerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomerInput, UserUpdateWithoutCustomerInput>, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHandyManInput = {
    create?: XOR<UserCreateWithoutHandyManInput, UserUncheckedCreateWithoutHandyManInput>
    connectOrCreate?: UserCreateOrConnectWithoutHandyManInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceHandyManCreateNestedManyWithoutHandyManInput = {
    create?: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput> | ServiceHandyManCreateWithoutHandyManInput[] | ServiceHandyManUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutHandyManInput | ServiceHandyManCreateOrConnectWithoutHandyManInput[]
    createMany?: ServiceHandyManCreateManyHandyManInputEnvelope
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutHandyManInput = {
    create?: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput> | OrderCreateWithoutHandyManInput[] | OrderUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutHandyManInput | OrderCreateOrConnectWithoutHandyManInput[]
    createMany?: OrderCreateManyHandyManInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ServiceHandyManUncheckedCreateNestedManyWithoutHandyManInput = {
    create?: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput> | ServiceHandyManCreateWithoutHandyManInput[] | ServiceHandyManUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutHandyManInput | ServiceHandyManCreateOrConnectWithoutHandyManInput[]
    createMany?: ServiceHandyManCreateManyHandyManInputEnvelope
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutHandyManInput = {
    create?: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput> | OrderCreateWithoutHandyManInput[] | OrderUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutHandyManInput | OrderCreateOrConnectWithoutHandyManInput[]
    createMany?: OrderCreateManyHandyManInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutHandyManNestedInput = {
    create?: XOR<UserCreateWithoutHandyManInput, UserUncheckedCreateWithoutHandyManInput>
    connectOrCreate?: UserCreateOrConnectWithoutHandyManInput
    upsert?: UserUpsertWithoutHandyManInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHandyManInput, UserUpdateWithoutHandyManInput>, UserUncheckedUpdateWithoutHandyManInput>
  }

  export type ServiceHandyManUpdateManyWithoutHandyManNestedInput = {
    create?: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput> | ServiceHandyManCreateWithoutHandyManInput[] | ServiceHandyManUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutHandyManInput | ServiceHandyManCreateOrConnectWithoutHandyManInput[]
    upsert?: ServiceHandyManUpsertWithWhereUniqueWithoutHandyManInput | ServiceHandyManUpsertWithWhereUniqueWithoutHandyManInput[]
    createMany?: ServiceHandyManCreateManyHandyManInputEnvelope
    set?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    disconnect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    delete?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    update?: ServiceHandyManUpdateWithWhereUniqueWithoutHandyManInput | ServiceHandyManUpdateWithWhereUniqueWithoutHandyManInput[]
    updateMany?: ServiceHandyManUpdateManyWithWhereWithoutHandyManInput | ServiceHandyManUpdateManyWithWhereWithoutHandyManInput[]
    deleteMany?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutHandyManNestedInput = {
    create?: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput> | OrderCreateWithoutHandyManInput[] | OrderUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutHandyManInput | OrderCreateOrConnectWithoutHandyManInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutHandyManInput | OrderUpsertWithWhereUniqueWithoutHandyManInput[]
    createMany?: OrderCreateManyHandyManInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutHandyManInput | OrderUpdateWithWhereUniqueWithoutHandyManInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutHandyManInput | OrderUpdateManyWithWhereWithoutHandyManInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ServiceHandyManUncheckedUpdateManyWithoutHandyManNestedInput = {
    create?: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput> | ServiceHandyManCreateWithoutHandyManInput[] | ServiceHandyManUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutHandyManInput | ServiceHandyManCreateOrConnectWithoutHandyManInput[]
    upsert?: ServiceHandyManUpsertWithWhereUniqueWithoutHandyManInput | ServiceHandyManUpsertWithWhereUniqueWithoutHandyManInput[]
    createMany?: ServiceHandyManCreateManyHandyManInputEnvelope
    set?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    disconnect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    delete?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    update?: ServiceHandyManUpdateWithWhereUniqueWithoutHandyManInput | ServiceHandyManUpdateWithWhereUniqueWithoutHandyManInput[]
    updateMany?: ServiceHandyManUpdateManyWithWhereWithoutHandyManInput | ServiceHandyManUpdateManyWithWhereWithoutHandyManInput[]
    deleteMany?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutHandyManNestedInput = {
    create?: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput> | OrderCreateWithoutHandyManInput[] | OrderUncheckedCreateWithoutHandyManInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutHandyManInput | OrderCreateOrConnectWithoutHandyManInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutHandyManInput | OrderUpsertWithWhereUniqueWithoutHandyManInput[]
    createMany?: OrderCreateManyHandyManInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutHandyManInput | OrderUpdateWithWhereUniqueWithoutHandyManInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutHandyManInput | OrderUpdateManyWithWhereWithoutHandyManInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ServiceHandyManCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput> | ServiceHandyManCreateWithoutServiceInput[] | ServiceHandyManUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutServiceInput | ServiceHandyManCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceHandyManCreateManyServiceInputEnvelope
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutServiceInput = {
    create?: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput> | OrderCreateWithoutServiceInput[] | OrderUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutServiceInput | OrderCreateOrConnectWithoutServiceInput[]
    createMany?: OrderCreateManyServiceInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ServiceHandyManUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput> | ServiceHandyManCreateWithoutServiceInput[] | ServiceHandyManUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutServiceInput | ServiceHandyManCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceHandyManCreateManyServiceInputEnvelope
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput> | OrderCreateWithoutServiceInput[] | OrderUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutServiceInput | OrderCreateOrConnectWithoutServiceInput[]
    createMany?: OrderCreateManyServiceInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ServiceHandyManUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput> | ServiceHandyManCreateWithoutServiceInput[] | ServiceHandyManUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutServiceInput | ServiceHandyManCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceHandyManUpsertWithWhereUniqueWithoutServiceInput | ServiceHandyManUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceHandyManCreateManyServiceInputEnvelope
    set?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    disconnect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    delete?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    update?: ServiceHandyManUpdateWithWhereUniqueWithoutServiceInput | ServiceHandyManUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceHandyManUpdateManyWithWhereWithoutServiceInput | ServiceHandyManUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutServiceNestedInput = {
    create?: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput> | OrderCreateWithoutServiceInput[] | OrderUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutServiceInput | OrderCreateOrConnectWithoutServiceInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutServiceInput | OrderUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: OrderCreateManyServiceInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutServiceInput | OrderUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutServiceInput | OrderUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ServiceHandyManUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput> | ServiceHandyManCreateWithoutServiceInput[] | ServiceHandyManUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceHandyManCreateOrConnectWithoutServiceInput | ServiceHandyManCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceHandyManUpsertWithWhereUniqueWithoutServiceInput | ServiceHandyManUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceHandyManCreateManyServiceInputEnvelope
    set?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    disconnect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    delete?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    connect?: ServiceHandyManWhereUniqueInput | ServiceHandyManWhereUniqueInput[]
    update?: ServiceHandyManUpdateWithWhereUniqueWithoutServiceInput | ServiceHandyManUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceHandyManUpdateManyWithWhereWithoutServiceInput | ServiceHandyManUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput> | OrderCreateWithoutServiceInput[] | OrderUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutServiceInput | OrderCreateOrConnectWithoutServiceInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutServiceInput | OrderUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: OrderCreateManyServiceInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutServiceInput | OrderUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutServiceInput | OrderUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ServiceHandyManCreateImagesInput = {
    set: string[]
  }

  export type HandyManCreateNestedOneWithoutServiceHandyMansInput = {
    create?: XOR<HandyManCreateWithoutServiceHandyMansInput, HandyManUncheckedCreateWithoutServiceHandyMansInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutServiceHandyMansInput
    connect?: HandyManWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutServiceHandyMansInput = {
    create?: XOR<ServiceCreateWithoutServiceHandyMansInput, ServiceUncheckedCreateWithoutServiceHandyMansInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceHandyMansInput
    connect?: ServiceWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ServiceHandyManUpdateImagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type HandyManUpdateOneRequiredWithoutServiceHandyMansNestedInput = {
    create?: XOR<HandyManCreateWithoutServiceHandyMansInput, HandyManUncheckedCreateWithoutServiceHandyMansInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutServiceHandyMansInput
    upsert?: HandyManUpsertWithoutServiceHandyMansInput
    connect?: HandyManWhereUniqueInput
    update?: XOR<XOR<HandyManUpdateToOneWithWhereWithoutServiceHandyMansInput, HandyManUpdateWithoutServiceHandyMansInput>, HandyManUncheckedUpdateWithoutServiceHandyMansInput>
  }

  export type ServiceUpdateOneRequiredWithoutServiceHandyMansNestedInput = {
    create?: XOR<ServiceCreateWithoutServiceHandyMansInput, ServiceUncheckedCreateWithoutServiceHandyMansInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceHandyMansInput
    upsert?: ServiceUpsertWithoutServiceHandyMansInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutServiceHandyMansInput, ServiceUpdateWithoutServiceHandyMansInput>, ServiceUncheckedUpdateWithoutServiceHandyMansInput>
  }

  export type OrderCreateImagesInput = {
    set: string[]
  }

  export type CustomerCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type HandyManCreateNestedOneWithoutOrdersInput = {
    create?: XOR<HandyManCreateWithoutOrdersInput, HandyManUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutOrdersInput
    connect?: HandyManWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ServiceCreateWithoutOrdersInput, ServiceUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutOrdersInput
    connect?: ServiceWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutOrderInput = {
    create?: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput> | FeedbackCreateWithoutOrderInput[] | FeedbackUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOrderInput | FeedbackCreateOrConnectWithoutOrderInput[]
    createMany?: FeedbackCreateManyOrderInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput> | FeedbackCreateWithoutOrderInput[] | FeedbackUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOrderInput | FeedbackCreateOrConnectWithoutOrderInput[]
    createMany?: FeedbackCreateManyOrderInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type OrderUpdateImagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumEnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.EnumOrderStatus
  }

  export type CustomerUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    upsert?: CustomerUpsertWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutOrdersInput, CustomerUpdateWithoutOrdersInput>, CustomerUncheckedUpdateWithoutOrdersInput>
  }

  export type HandyManUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<HandyManCreateWithoutOrdersInput, HandyManUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: HandyManCreateOrConnectWithoutOrdersInput
    upsert?: HandyManUpsertWithoutOrdersInput
    connect?: HandyManWhereUniqueInput
    update?: XOR<XOR<HandyManUpdateToOneWithWhereWithoutOrdersInput, HandyManUpdateWithoutOrdersInput>, HandyManUncheckedUpdateWithoutOrdersInput>
  }

  export type ServiceUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<ServiceCreateWithoutOrdersInput, ServiceUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutOrdersInput
    upsert?: ServiceUpsertWithoutOrdersInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutOrdersInput, ServiceUpdateWithoutOrdersInput>, ServiceUncheckedUpdateWithoutOrdersInput>
  }

  export type FeedbackUpdateManyWithoutOrderNestedInput = {
    create?: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput> | FeedbackCreateWithoutOrderInput[] | FeedbackUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOrderInput | FeedbackCreateOrConnectWithoutOrderInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutOrderInput | FeedbackUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: FeedbackCreateManyOrderInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutOrderInput | FeedbackUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutOrderInput | FeedbackUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput> | FeedbackCreateWithoutOrderInput[] | FeedbackUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOrderInput | FeedbackCreateOrConnectWithoutOrderInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutOrderInput | FeedbackUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: FeedbackCreateManyOrderInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutOrderInput | FeedbackUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutOrderInput | FeedbackUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<OrderCreateWithoutFeedbacksInput, OrderUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: OrderCreateOrConnectWithoutFeedbacksInput
    connect?: OrderWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type OrderUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<OrderCreateWithoutFeedbacksInput, OrderUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: OrderCreateOrConnectWithoutFeedbacksInput
    upsert?: OrderUpsertWithoutFeedbacksInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutFeedbacksInput, OrderUpdateWithoutFeedbacksInput>, OrderUncheckedUpdateWithoutFeedbacksInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnumOrderStatus | EnumEnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnumOrderStatusFilter<$PrismaModel> | $Enums.EnumOrderStatus
  }

  export type NestedEnumEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnumOrderStatus | EnumEnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnumOrderStatus[] | ListEnumEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnumOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumEnumOrderStatusFilter<$PrismaModel>
  }

  export type CustomerCreateWithoutUserInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    orders?: OrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    CustomerId?: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type HandyManCreateWithoutUserInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    serviceHandyMans?: ServiceHandyManCreateNestedManyWithoutHandyManInput
    orders?: OrderCreateNestedManyWithoutHandyManInput
  }

  export type HandyManUncheckedCreateWithoutUserInput = {
    HandyManId?: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    serviceHandyMans?: ServiceHandyManUncheckedCreateNestedManyWithoutHandyManInput
    orders?: OrderUncheckedCreateNestedManyWithoutHandyManInput
  }

  export type HandyManCreateOrConnectWithoutUserInput = {
    where: HandyManWhereUniqueInput
    create: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateWithoutUserInput = {
    UserIdFrom: number
    Message: string
    Rating: number
    order: OrderCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    FeedbackId?: number
    UserIdFrom: number
    OrderId: number
    Message: string
    Rating: number
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutUserInput = {
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateWithoutUserInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    CustomerId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type HandyManUpsertWithoutUserInput = {
    update: XOR<HandyManUpdateWithoutUserInput, HandyManUncheckedUpdateWithoutUserInput>
    create: XOR<HandyManCreateWithoutUserInput, HandyManUncheckedCreateWithoutUserInput>
    where?: HandyManWhereInput
  }

  export type HandyManUpdateToOneWithWhereWithoutUserInput = {
    where?: HandyManWhereInput
    data: XOR<HandyManUpdateWithoutUserInput, HandyManUncheckedUpdateWithoutUserInput>
  }

  export type HandyManUpdateWithoutUserInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUpdateManyWithoutHandyManNestedInput
    orders?: OrderUpdateManyWithoutHandyManNestedInput
  }

  export type HandyManUncheckedUpdateWithoutUserInput = {
    HandyManId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUncheckedUpdateManyWithoutHandyManNestedInput
    orders?: OrderUncheckedUpdateManyWithoutHandyManNestedInput
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    FeedbackId?: IntFilter<"Feedback"> | number
    UserIdFrom?: IntFilter<"Feedback"> | number
    UserIdTo?: IntFilter<"Feedback"> | number
    OrderId?: IntFilter<"Feedback"> | number
    Message?: StringFilter<"Feedback"> | string
    Rating?: IntFilter<"Feedback"> | number
  }

  export type UserCreateWithoutCustomerInput = {
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    handyMan?: HandyManCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomerInput = {
    Id?: number
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    handyMan?: HandyManUncheckedCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateWithoutCustomerInput = {
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    handyMan: HandyManCreateNestedOneWithoutOrdersInput
    service: ServiceCreateNestedOneWithoutOrdersInput
    feedbacks?: FeedbackCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCustomerInput = {
    OrderId?: number
    HandyManId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateManyCustomerInputEnvelope = {
    data: OrderCreateManyCustomerInput | OrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCustomerInput = {
    update: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type UserUpdateWithoutCustomerInput = {
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    handyMan?: HandyManUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomerInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    handyMan?: HandyManUncheckedUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithWhereWithoutCustomerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OrderId?: IntFilter<"Order"> | number
    CustomerId?: IntFilter<"Order"> | number
    HandyManId?: IntFilter<"Order"> | number
    ServiceId?: IntFilter<"Order"> | number
    Images?: StringNullableListFilter<"Order">
    Address?: StringFilter<"Order"> | string
    Message?: StringFilter<"Order"> | string
    Status?: EnumEnumOrderStatusFilter<"Order"> | $Enums.EnumOrderStatus
    Created_At?: DateTimeFilter<"Order"> | Date | string
    UpdatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type UserCreateWithoutHandyManInput = {
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHandyManInput = {
    Id?: number
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHandyManInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHandyManInput, UserUncheckedCreateWithoutHandyManInput>
  }

  export type ServiceHandyManCreateWithoutHandyManInput = {
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
    service: ServiceCreateNestedOneWithoutServiceHandyMansInput
  }

  export type ServiceHandyManUncheckedCreateWithoutHandyManInput = {
    ServiceHandyManId?: number
    ServiceId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type ServiceHandyManCreateOrConnectWithoutHandyManInput = {
    where: ServiceHandyManWhereUniqueInput
    create: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput>
  }

  export type ServiceHandyManCreateManyHandyManInputEnvelope = {
    data: ServiceHandyManCreateManyHandyManInput | ServiceHandyManCreateManyHandyManInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutHandyManInput = {
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    service: ServiceCreateNestedOneWithoutOrdersInput
    feedbacks?: FeedbackCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutHandyManInput = {
    OrderId?: number
    CustomerId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutHandyManInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput>
  }

  export type OrderCreateManyHandyManInputEnvelope = {
    data: OrderCreateManyHandyManInput | OrderCreateManyHandyManInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHandyManInput = {
    update: XOR<UserUpdateWithoutHandyManInput, UserUncheckedUpdateWithoutHandyManInput>
    create: XOR<UserCreateWithoutHandyManInput, UserUncheckedCreateWithoutHandyManInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHandyManInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHandyManInput, UserUncheckedUpdateWithoutHandyManInput>
  }

  export type UserUpdateWithoutHandyManInput = {
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHandyManInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ServiceHandyManUpsertWithWhereUniqueWithoutHandyManInput = {
    where: ServiceHandyManWhereUniqueInput
    update: XOR<ServiceHandyManUpdateWithoutHandyManInput, ServiceHandyManUncheckedUpdateWithoutHandyManInput>
    create: XOR<ServiceHandyManCreateWithoutHandyManInput, ServiceHandyManUncheckedCreateWithoutHandyManInput>
  }

  export type ServiceHandyManUpdateWithWhereUniqueWithoutHandyManInput = {
    where: ServiceHandyManWhereUniqueInput
    data: XOR<ServiceHandyManUpdateWithoutHandyManInput, ServiceHandyManUncheckedUpdateWithoutHandyManInput>
  }

  export type ServiceHandyManUpdateManyWithWhereWithoutHandyManInput = {
    where: ServiceHandyManScalarWhereInput
    data: XOR<ServiceHandyManUpdateManyMutationInput, ServiceHandyManUncheckedUpdateManyWithoutHandyManInput>
  }

  export type ServiceHandyManScalarWhereInput = {
    AND?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
    OR?: ServiceHandyManScalarWhereInput[]
    NOT?: ServiceHandyManScalarWhereInput | ServiceHandyManScalarWhereInput[]
    ServiceHandyManId?: IntFilter<"ServiceHandyMan"> | number
    HandyManId?: IntFilter<"ServiceHandyMan"> | number
    ServiceId?: IntFilter<"ServiceHandyMan"> | number
    Message?: StringFilter<"ServiceHandyMan"> | string
    Price?: DecimalFilter<"ServiceHandyMan"> | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFilter<"ServiceHandyMan"> | string
    Images?: StringNullableListFilter<"ServiceHandyMan">
  }

  export type OrderUpsertWithWhereUniqueWithoutHandyManInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutHandyManInput, OrderUncheckedUpdateWithoutHandyManInput>
    create: XOR<OrderCreateWithoutHandyManInput, OrderUncheckedCreateWithoutHandyManInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutHandyManInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutHandyManInput, OrderUncheckedUpdateWithoutHandyManInput>
  }

  export type OrderUpdateManyWithWhereWithoutHandyManInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutHandyManInput>
  }

  export type ServiceHandyManCreateWithoutServiceInput = {
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
    handyMan: HandyManCreateNestedOneWithoutServiceHandyMansInput
  }

  export type ServiceHandyManUncheckedCreateWithoutServiceInput = {
    ServiceHandyManId?: number
    HandyManId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type ServiceHandyManCreateOrConnectWithoutServiceInput = {
    where: ServiceHandyManWhereUniqueInput
    create: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput>
  }

  export type ServiceHandyManCreateManyServiceInputEnvelope = {
    data: ServiceHandyManCreateManyServiceInput | ServiceHandyManCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutServiceInput = {
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    handyMan: HandyManCreateNestedOneWithoutOrdersInput
    feedbacks?: FeedbackCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutServiceInput = {
    OrderId?: number
    CustomerId: number
    HandyManId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutServiceInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput>
  }

  export type OrderCreateManyServiceInputEnvelope = {
    data: OrderCreateManyServiceInput | OrderCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceHandyManUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceHandyManWhereUniqueInput
    update: XOR<ServiceHandyManUpdateWithoutServiceInput, ServiceHandyManUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceHandyManCreateWithoutServiceInput, ServiceHandyManUncheckedCreateWithoutServiceInput>
  }

  export type ServiceHandyManUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceHandyManWhereUniqueInput
    data: XOR<ServiceHandyManUpdateWithoutServiceInput, ServiceHandyManUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceHandyManUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceHandyManScalarWhereInput
    data: XOR<ServiceHandyManUpdateManyMutationInput, ServiceHandyManUncheckedUpdateManyWithoutServiceInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutServiceInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutServiceInput, OrderUncheckedUpdateWithoutServiceInput>
    create: XOR<OrderCreateWithoutServiceInput, OrderUncheckedCreateWithoutServiceInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutServiceInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutServiceInput, OrderUncheckedUpdateWithoutServiceInput>
  }

  export type OrderUpdateManyWithWhereWithoutServiceInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutServiceInput>
  }

  export type HandyManCreateWithoutServiceHandyMansInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    user: UserCreateNestedOneWithoutHandyManInput
    orders?: OrderCreateNestedManyWithoutHandyManInput
  }

  export type HandyManUncheckedCreateWithoutServiceHandyMansInput = {
    HandyManId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    orders?: OrderUncheckedCreateNestedManyWithoutHandyManInput
  }

  export type HandyManCreateOrConnectWithoutServiceHandyMansInput = {
    where: HandyManWhereUniqueInput
    create: XOR<HandyManCreateWithoutServiceHandyMansInput, HandyManUncheckedCreateWithoutServiceHandyMansInput>
  }

  export type ServiceCreateWithoutServiceHandyMansInput = {
    ServiceType: string
    ServiceName: string
    orders?: OrderCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutServiceHandyMansInput = {
    ServiceId?: number
    ServiceType: string
    ServiceName: string
    orders?: OrderUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutServiceHandyMansInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutServiceHandyMansInput, ServiceUncheckedCreateWithoutServiceHandyMansInput>
  }

  export type HandyManUpsertWithoutServiceHandyMansInput = {
    update: XOR<HandyManUpdateWithoutServiceHandyMansInput, HandyManUncheckedUpdateWithoutServiceHandyMansInput>
    create: XOR<HandyManCreateWithoutServiceHandyMansInput, HandyManUncheckedCreateWithoutServiceHandyMansInput>
    where?: HandyManWhereInput
  }

  export type HandyManUpdateToOneWithWhereWithoutServiceHandyMansInput = {
    where?: HandyManWhereInput
    data: XOR<HandyManUpdateWithoutServiceHandyMansInput, HandyManUncheckedUpdateWithoutServiceHandyMansInput>
  }

  export type HandyManUpdateWithoutServiceHandyMansInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHandyManNestedInput
    orders?: OrderUpdateManyWithoutHandyManNestedInput
  }

  export type HandyManUncheckedUpdateWithoutServiceHandyMansInput = {
    HandyManId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutHandyManNestedInput
  }

  export type ServiceUpsertWithoutServiceHandyMansInput = {
    update: XOR<ServiceUpdateWithoutServiceHandyMansInput, ServiceUncheckedUpdateWithoutServiceHandyMansInput>
    create: XOR<ServiceCreateWithoutServiceHandyMansInput, ServiceUncheckedCreateWithoutServiceHandyMansInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutServiceHandyMansInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutServiceHandyMansInput, ServiceUncheckedUpdateWithoutServiceHandyMansInput>
  }

  export type ServiceUpdateWithoutServiceHandyMansInput = {
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutServiceHandyMansInput = {
    ServiceId?: IntFieldUpdateOperationsInput | number
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type CustomerCreateWithoutOrdersInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    user: UserCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutOrdersInput = {
    CustomerId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
  }

  export type CustomerCreateOrConnectWithoutOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
  }

  export type HandyManCreateWithoutOrdersInput = {
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    user: UserCreateNestedOneWithoutHandyManInput
    serviceHandyMans?: ServiceHandyManCreateNestedManyWithoutHandyManInput
  }

  export type HandyManUncheckedCreateWithoutOrdersInput = {
    HandyManId?: number
    UserId: number
    Name: string
    PhoneNumber: string
    AvatarPath?: string
    serviceHandyMans?: ServiceHandyManUncheckedCreateNestedManyWithoutHandyManInput
  }

  export type HandyManCreateOrConnectWithoutOrdersInput = {
    where: HandyManWhereUniqueInput
    create: XOR<HandyManCreateWithoutOrdersInput, HandyManUncheckedCreateWithoutOrdersInput>
  }

  export type ServiceCreateWithoutOrdersInput = {
    ServiceType: string
    ServiceName: string
    serviceHandyMans?: ServiceHandyManCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutOrdersInput = {
    ServiceId?: number
    ServiceType: string
    ServiceName: string
    serviceHandyMans?: ServiceHandyManUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutOrdersInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutOrdersInput, ServiceUncheckedCreateWithoutOrdersInput>
  }

  export type FeedbackCreateWithoutOrderInput = {
    UserIdFrom: number
    Message: string
    Rating: number
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutOrderInput = {
    FeedbackId?: number
    UserIdFrom: number
    UserIdTo: number
    Message: string
    Rating: number
  }

  export type FeedbackCreateOrConnectWithoutOrderInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput>
  }

  export type FeedbackCreateManyOrderInputEnvelope = {
    data: FeedbackCreateManyOrderInput | FeedbackCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutOrdersInput = {
    update: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
  }

  export type CustomerUpdateWithoutOrdersInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutOrdersInput = {
    CustomerId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
  }

  export type HandyManUpsertWithoutOrdersInput = {
    update: XOR<HandyManUpdateWithoutOrdersInput, HandyManUncheckedUpdateWithoutOrdersInput>
    create: XOR<HandyManCreateWithoutOrdersInput, HandyManUncheckedCreateWithoutOrdersInput>
    where?: HandyManWhereInput
  }

  export type HandyManUpdateToOneWithWhereWithoutOrdersInput = {
    where?: HandyManWhereInput
    data: XOR<HandyManUpdateWithoutOrdersInput, HandyManUncheckedUpdateWithoutOrdersInput>
  }

  export type HandyManUpdateWithoutOrdersInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHandyManNestedInput
    serviceHandyMans?: ServiceHandyManUpdateManyWithoutHandyManNestedInput
  }

  export type HandyManUncheckedUpdateWithoutOrdersInput = {
    HandyManId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    AvatarPath?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUncheckedUpdateManyWithoutHandyManNestedInput
  }

  export type ServiceUpsertWithoutOrdersInput = {
    update: XOR<ServiceUpdateWithoutOrdersInput, ServiceUncheckedUpdateWithoutOrdersInput>
    create: XOR<ServiceCreateWithoutOrdersInput, ServiceUncheckedCreateWithoutOrdersInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutOrdersInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutOrdersInput, ServiceUncheckedUpdateWithoutOrdersInput>
  }

  export type ServiceUpdateWithoutOrdersInput = {
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutOrdersInput = {
    ServiceId?: IntFieldUpdateOperationsInput | number
    ServiceType?: StringFieldUpdateOperationsInput | string
    ServiceName?: StringFieldUpdateOperationsInput | string
    serviceHandyMans?: ServiceHandyManUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type FeedbackUpsertWithWhereUniqueWithoutOrderInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutOrderInput, FeedbackUncheckedUpdateWithoutOrderInput>
    create: XOR<FeedbackCreateWithoutOrderInput, FeedbackUncheckedCreateWithoutOrderInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutOrderInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutOrderInput, FeedbackUncheckedUpdateWithoutOrderInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutOrderInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutOrderInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
    handyMan?: HandyManCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    Id?: number
    Password: string
    Email: string
    Role: number
    CreatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    handyMan?: HandyManUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type OrderCreateWithoutFeedbacksInput = {
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    handyMan: HandyManCreateNestedOneWithoutOrdersInput
    service: ServiceCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutFeedbacksInput = {
    OrderId?: number
    CustomerId: number
    HandyManId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutFeedbacksInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutFeedbacksInput, OrderUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
    handyMan?: HandyManUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    handyMan?: HandyManUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OrderUpsertWithoutFeedbacksInput = {
    update: XOR<OrderUpdateWithoutFeedbacksInput, OrderUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<OrderCreateWithoutFeedbacksInput, OrderUncheckedCreateWithoutFeedbacksInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutFeedbacksInput, OrderUncheckedUpdateWithoutFeedbacksInput>
  }

  export type OrderUpdateWithoutFeedbacksInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    handyMan?: HandyManUpdateOneRequiredWithoutOrdersNestedInput
    service?: ServiceUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutFeedbacksInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyUserInput = {
    FeedbackId?: number
    UserIdFrom: number
    OrderId: number
    Message: string
    Rating: number
  }

  export type FeedbackUpdateWithoutUserInput = {
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    OrderId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    OrderId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateManyCustomerInput = {
    OrderId?: number
    HandyManId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
  }

  export type OrderUpdateWithoutCustomerInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    handyMan?: HandyManUpdateOneRequiredWithoutOrdersNestedInput
    service?: ServiceUpdateOneRequiredWithoutOrdersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCustomerInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCustomerInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHandyManCreateManyHandyManInput = {
    ServiceHandyManId?: number
    ServiceId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type OrderCreateManyHandyManInput = {
    OrderId?: number
    CustomerId: number
    ServiceId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
  }

  export type ServiceHandyManUpdateWithoutHandyManInput = {
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
    service?: ServiceUpdateOneRequiredWithoutServiceHandyMansNestedInput
  }

  export type ServiceHandyManUncheckedUpdateWithoutHandyManInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type ServiceHandyManUncheckedUpdateManyWithoutHandyManInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type OrderUpdateWithoutHandyManInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    service?: ServiceUpdateOneRequiredWithoutOrdersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutHandyManInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutHandyManInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    ServiceId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHandyManCreateManyServiceInput = {
    ServiceHandyManId?: number
    HandyManId: number
    Message: string
    Price: Decimal | DecimalJsLike | number | string
    TypePrice: string
    Images?: ServiceHandyManCreateImagesInput | string[]
  }

  export type OrderCreateManyServiceInput = {
    OrderId?: number
    CustomerId: number
    HandyManId: number
    Images?: OrderCreateImagesInput | string[]
    Address: string
    Message: string
    Status?: $Enums.EnumOrderStatus
    Created_At?: Date | string
    UpdatedAt?: Date | string
  }

  export type ServiceHandyManUpdateWithoutServiceInput = {
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
    handyMan?: HandyManUpdateOneRequiredWithoutServiceHandyMansNestedInput
  }

  export type ServiceHandyManUncheckedUpdateWithoutServiceInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type ServiceHandyManUncheckedUpdateManyWithoutServiceInput = {
    ServiceHandyManId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TypePrice?: StringFieldUpdateOperationsInput | string
    Images?: ServiceHandyManUpdateImagesInput | string[]
  }

  export type OrderUpdateWithoutServiceInput = {
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    handyMan?: HandyManUpdateOneRequiredWithoutOrdersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutServiceInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutServiceInput = {
    OrderId?: IntFieldUpdateOperationsInput | number
    CustomerId?: IntFieldUpdateOperationsInput | number
    HandyManId?: IntFieldUpdateOperationsInput | number
    Images?: OrderUpdateImagesInput | string[]
    Address?: StringFieldUpdateOperationsInput | string
    Message?: StringFieldUpdateOperationsInput | string
    Status?: EnumEnumOrderStatusFieldUpdateOperationsInput | $Enums.EnumOrderStatus
    Created_At?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyOrderInput = {
    FeedbackId?: number
    UserIdFrom: number
    UserIdTo: number
    Message: string
    Rating: number
  }

  export type FeedbackUpdateWithoutOrderInput = {
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutOrderInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    UserIdTo?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUncheckedUpdateManyWithoutOrderInput = {
    FeedbackId?: IntFieldUpdateOperationsInput | number
    UserIdFrom?: IntFieldUpdateOperationsInput | number
    UserIdTo?: IntFieldUpdateOperationsInput | number
    Message?: StringFieldUpdateOperationsInput | string
    Rating?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandyManCountOutputTypeDefaultArgs instead
     */
    export type HandyManCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandyManCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceCountOutputTypeDefaultArgs instead
     */
    export type ServiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandyManDefaultArgs instead
     */
    export type HandyManArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandyManDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceDefaultArgs instead
     */
    export type ServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceHandyManDefaultArgs instead
     */
    export type ServiceHandyManArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceHandyManDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}